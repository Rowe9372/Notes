
### Git command line  

` git init` 把这个目录变成Git可以管理的仓库

` git config --global user.name "Your Name" ` 设置用户名  ` --global` 全局参数

` git config --global user.email "email@example.com" ` 设置用户邮箱

` git add readme.txt ` 添加文件到暂存区

` git add . ` 添加所有修改和新增的文件
 
` git commit -m "wrote a readme file" ` 提交暂存区文件到仓库  -m 后面是提交说明

` git commit -a ` 提交所有文件到仓库

` git status ` 显示仓库当前状态

` git log ` 查看历史版本记录

` git log --pretty=oneline ` 参数 --pretty=oneling 显示简洁历史版本号

` git reset --hard HEAD^ ` 参数HEAD^ 上一个版本 HEAD^^上上一个版本

` git reset --hard  df6905c ` 参数 df6905c 版本号（不必写全，前7位）

` git reflog ` 记录命令历史

` git diff HEAD -- README.txt ` 查看readme.txt 工作区和版本库里面最新版本的区别

` git checkout -- readme.txt` 让文件回到最近一次git commit或git add时的状态。

` git rm readme.txt ` 从版本库中删除该文件

#### github 远程库

` git remote add origin https://github.com/Rowe9372/Notes.git ` 关联远程库

` git push -u origin master ` 推送当前分支所有内容到远程库，
并关联远程master分支， 后期可直接 `git push ` 推送 

` git clone  https://github.com/Rowe9372/Notes.git` 从远程库克隆

### 分支管理

` git branch dev ` 创建dev分支

` git checkout dev ` 切换到dev分支

` git  checkout -b dev ` 创建分支并切换到分支dev上

` git branch ` 列出所有分支 ，`*` 标记当前分支

` git merge dev `  合并指定分支到当前分支

` git merge --no-off -m "merge is no off" dev ` 禁止使用Fast  forward 模式

` git branch -d dev `  删除指定分支

` git branch -D dev ` 强行删除还没有合并的分支
 
` git log --graph ` 查看分支合并图

` git log --graph --pretty=oneline  --abbrev-commit `  查看简洁图

` git stash ` 储存当前工作（还没有提交时）

` git stash list ` 查看存储的工作

` git stash apply  stash@{0}: ` 恢复存储的版本 stash 内容不删

` git stash drop ` 删除stash 

` git stash pop ` 恢复并删除stash

#### 多人协作

` git remote ` 查看远程库信息

` git remote -v ` 显示更详细信息

` git push origin master ` 把指定分支的所有本地提交到远程库

` git checkout -b branch-name origin/branch-name ` 创建远程origin 分支到本地

` git pull ` 同步远程库分支

` git branch --set-upstream branch-name origin/branch-name ` 建立本地分支与远程分支的关联

#### 标签

` git tag v1.0 ` 在需要打标签的分支上打一个新标签

` git tag ` 查看所有标签
